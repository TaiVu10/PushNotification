{"version":3,"file":"FluxConnection.js","sourceRoot":"","sources":["src/FluxConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DefaultEventsMap } from '@socket.io/component-emitter';\nimport type { ReactiveElement } from 'lit';\nimport { io, Socket } from 'socket.io-client';\nimport type { Subscription } from './Connect';\nimport { getCsrfTokenHeadersForEndpointRequest } from './CsrfUtils';\nimport type { ClientMessage, ServerCloseMessage, ServerConnectMessage, ServerMessage } from './FluxMessages';\n\nexport enum State {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\ntype ActiveEvent = CustomEvent<{ active: boolean }>;\ninterface EventMap {\n  'state-changed': ActiveEvent;\n}\n\ntype ListenerType<T extends keyof EventMap> =\n  | ((this: FluxConnection, ev: EventMap[T]) => any)\n  | {\n      handleEvent(ev: EventMap[T]): void;\n    }\n  | null;\n\n/**\n * A representation of the underlying persistent network connection used for subscribing to Flux type endpoint methods.\n */\nexport class FluxConnection extends EventTarget {\n  private nextId = 0;\n  private endpointInfos = new Map<string, string>();\n  private onNextCallbacks = new Map<string, (value: any) => void>();\n  private onCompleteCallbacks = new Map<string, () => void>();\n  private onErrorCallbacks = new Map<string, () => void>();\n\n  private socket!: Socket<DefaultEventsMap, DefaultEventsMap>;\n  public state: State = State.INACTIVE;\n\n  constructor() {\n    super();\n    if (!(window as any).Vaadin?.featureFlags?.hillaPush) {\n      // Remove when removing feature flag\n      throw new Error(\n        `Push support in Hilla is not enabled. Enable it in the debug window or by adding com.vaadin.experimental.hillaPush=true to vaadin-featureflags.properties`,\n      );\n    }\n    this.connectWebsocket();\n  }\n\n  private connectWebsocket() {\n    const extraHeaders = getCsrfTokenHeadersForEndpointRequest(document);\n    this.socket = io('/hilla', { path: '/HILLA/push', extraHeaders });\n    this.socket.on('message', (message) => {\n      this.handleMessage(JSON.parse(message));\n    });\n    this.socket.on('disconnect', () => {\n      // https://socket.io/docs/v4/client-api/#event-disconnect\n      if (this.state === State.ACTIVE) {\n        this.state = State.INACTIVE;\n        this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: false } }));\n      }\n    });\n    this.socket.on('connect_error', () => {\n      // https://socket.io/docs/v4/client-api/#event-connect_error\n    });\n\n    this.socket.on('connect', () => {\n      // https://socket.io/docs/v4/client-api/#event-connect\n      if (this.state === State.INACTIVE) {\n        this.state = State.ACTIVE;\n        this.dispatchEvent(new CustomEvent('state-changed', { detail: { active: true } }));\n      }\n    });\n  }\n\n  private handleMessage(message: ClientMessage) {\n    const { id } = message;\n    const endpointInfo = this.endpointInfos.get(id);\n\n    if (message['@type'] === 'update') {\n      const callback = this.onNextCallbacks.get(id);\n      if (callback) {\n        callback(message.item);\n      }\n    } else if (message['@type'] === 'complete') {\n      const callback = this.onCompleteCallbacks.get(id);\n      if (callback) {\n        callback();\n      }\n\n      this.removeSubscription(id);\n    } else if (message['@type'] === 'error') {\n      const callback = this.onErrorCallbacks.get(id);\n      if (callback) {\n        callback();\n      }\n      this.removeSubscription(id);\n      if (!callback) {\n        throw new Error(`Error in ${endpointInfo}: ${message.message}`);\n      }\n    } else {\n      throw new Error(`Unknown message from server: ${message}`);\n    }\n  }\n\n  private removeSubscription(id: string) {\n    this.onNextCallbacks.delete(id);\n    this.onCompleteCallbacks.delete(id);\n    this.onErrorCallbacks.delete(id);\n    this.endpointInfos.delete(id);\n  }\n\n  private send(message: ServerMessage) {\n    this.socket.send(message);\n  }\n\n  /**\n   * Subscribes to the flux returned by the given endpoint name + method name using the given parameters.\n   *\n   * @param endpointName the endpoint to connect to\n   * @param methodName the method in the endpoint to connect to\n   * @param parameters the parameters to use\n   * @returns a subscription\n   */\n  subscribe(endpointName: string, methodName: string, parameters?: Array<any>): Subscription<any> {\n    const id: string = this.nextId.toString();\n    this.nextId += 1;\n    const params = parameters || [];\n\n    const msg: ServerConnectMessage = { '@type': 'subscribe', id, endpointName, methodName, params };\n    const endpointInfo = `${endpointName}.${methodName}(${JSON.stringify(params)})`;\n    this.send(msg);\n    this.endpointInfos.set(id, endpointInfo);\n    const hillaSubscription: Subscription<any> = {\n      onNext: (callback: (value: any) => void): Subscription<any> => {\n        this.onNextCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onComplete: (callback: () => void): Subscription<any> => {\n        this.onCompleteCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      onError: (callback: () => void): Subscription<any> => {\n        this.onErrorCallbacks.set(id, callback);\n        return hillaSubscription;\n      },\n      cancel: () => {\n        if (!this.endpointInfos.has(id)) {\n          // Subscription already closed or canceled\n          return;\n        }\n\n        const closeMessage: ServerCloseMessage = { '@type': 'unsubscribe', id };\n        this.send(closeMessage);\n        this.removeSubscription(id);\n      },\n      context: (context: ReactiveElement): Subscription<any> => {\n        context.addController({\n          hostDisconnected: () => {\n            hillaSubscription.cancel();\n          },\n        });\n        return hillaSubscription;\n      },\n    };\n    return hillaSubscription;\n  }\n}\n\nexport interface FluxConnection {\n  addEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n  removeEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;\n}\n"]}